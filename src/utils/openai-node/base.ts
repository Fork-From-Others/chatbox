/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 1.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {Configuration} from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import globalAxios from 'axios';
import {AxiosProxyConfig} from "axios/index";

export let API_PROXY: AxiosProxyConfig;
export let BASE_PATH = "https://api.openai.com/v1".replace(/\/+$/, "");

export function setProxy(proxyUrl: string) {
    proxyUrl = proxyUrl.trim();
    const proxyRegex = /^(http[s]|socks5?:\/\/)?([^:\/\s]+)(:[0-9]+)?/i;
    const match = proxyUrl.match(proxyRegex);
    const [, protocol = 'http', host = '127.0.0.1', port = '7890'] = match || [];
    if (protocol && host && port) {
        API_PROXY = {
            host: host,
            port: Number(port),
            protocol: protocol,
        };
    }
}

export function setHost(host: string) {
    host = host.trim()
    host = host.replace(/\/+$/, "");
    BASE_PATH = `${host}/v1`.replace(/\/+$/, "");
}

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected proxyConfig: AxiosProxyConfig | undefined;
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected apiProxy: AxiosProxyConfig = API_PROXY, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (apiProxy) {
            this.proxyConfig = apiProxy;
            axios.defaults.proxy = apiProxy;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}
